//
//--------------------------------------------------------------------------------
//          THIS FILE WAS AUTOMATICALLY GENERATED BY THE GENESIS2 ENGINE        
//  FOR MORE INFORMATION: OFER SHACHAM (CHIP GENESIS INC / STANFORD VLSI GROUP)
//    !! THIS VERSION OF GENESIS2 IS NOT FOR ANY COMMERCIAL USE !!
//     FOR COMMERCIAL LICENSE CONTACT SHACHAM@ALUMNI.STANFORD.EDU
//--------------------------------------------------------------------------------
//
//  
//	-----------------------------------------------
//	|            Genesis Release Info             |
//	|  $Change: 11904 $ --- $Date: 2013/08/03 $   |
//	-----------------------------------------------
//	
//
//  Source file: /Users/dillon/VerilogWorkspace/CGRAGenerator/hardware/generator_z/sb/sb.vp
//  Source template: sb
//
// --------------- Begin Pre-Generation Parameters Status Report ---------------
//
//	From 'generate' statement (priority=5):
// Parameter width 	= 16
// Parameter sides 	= 4
// Parameter feedthrough_outputs 	= 00000
// Parameter pe_output_count 	= 1
// Parameter registered_outputs 	= 11111
// Parameter sb_fs 	= 10000#10000#10000
// Parameter num_tracks 	= 5
// Parameter is_bidi 	= 0
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Command Line input (priority=4):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From XML input (priority=3):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Config File input (priority=2):
//
// ---------------- End Pre-Generation Pramameters Status Report ----------------

// width (_GENESIS2_INHERITANCE_PRIORITY_) = 16
//
// num_tracks (_GENESIS2_INHERITANCE_PRIORITY_) = 5
//
// sides (_GENESIS2_INHERITANCE_PRIORITY_) = 4
//
// feedthrough_outputs (_GENESIS2_INHERITANCE_PRIORITY_) = 00000
//
// registered_outputs (_GENESIS2_INHERITANCE_PRIORITY_) = 0x2b67
//
// pe_output_count (_GENESIS2_INHERITANCE_PRIORITY_) = 1
//
// is_bidi (_GENESIS2_INHERITANCE_PRIORITY_) = 0
//
// sb_fs (_GENESIS2_INHERITANCE_PRIORITY_) = 10000#10000#10000
//



module sb_unq1 (
clk, reset,
pe_output_0,
//out_0_0,
in_0_0,
//out_0_1,
//in_0_1,
//out_0_2,
//in_0_2,
//out_0_3,
//in_0_3,
//out_0_4,
//in_0_4,
out_1_0,
//in_1_0,
//out_1_1,
// in_1_1,
// //out_1_2,
// in_1_2,
// //out_1_3,
// in_1_3,
// //out_1_4,
// in_1_4,
// //out_2_0,
in_2_0,
// //out_2_1,
// in_2_1,
// //out_2_2,
// in_2_2,
// //out_2_3,
// in_2_3,
// //out_2_4,
// in_2_4,
// //out_3_0,
in_3_0,
// //out_3_1,
// //in_3_1,
// //out_3_2,
// //in_3_2,
// //out_3_3,
// //in_3_3,
// //out_3_4,
// //in_3_4,
config_addr,
config_data,
config_en
);

  input  clk;
  input  reset;
  input  config_en;
  input [31:0] config_data;

  input [31:0] config_addr;

  input [15:0] pe_output_0;
  
  input [15:0] in_0_0;

  output [15:0] out_1_0;

  input [15:0] in_2_0;

  input [15:0] in_3_0;

  reg [63:0] config_sb;
  
  always @(posedge clk) begin
    if (reset==1'b1) begin

      config_sb <= 64'd0;

    end else begin
      if (config_en==1'b1) begin
         case (config_addr[31:24])
           8'd0: config_sb[31:0] <= config_data;
           8'd1: config_sb[63:32] <= config_data;

           default: ;

         endcase
      end
    end
  end

  reg [15:0] out_1_0_i;

  always @(*) begin
    case (config_sb[11:10])
        2'd0: out_1_0_i = in_0_0;
        2'd1: out_1_0_i = in_2_0;
        2'd2: out_1_0_i = in_3_0;
        2'd3: out_1_0_i = pe_output_0;

    endcase
  end
  reg [15:0] out_1_0_id1;
  always @(posedge clk) begin
    out_1_0_id1 <= out_1_0_i;
  end
  assign out_1_0 = config_sb[45]?out_1_0_id1:out_1_0_i; 

endmodule


