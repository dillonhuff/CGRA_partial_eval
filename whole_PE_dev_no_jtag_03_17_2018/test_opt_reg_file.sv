//
//--------------------------------------------------------------------------------
//          THIS FILE WAS AUTOMATICALLY GENERATED BY THE GENESIS2 ENGINE        
//  FOR MORE INFORMATION: OFER SHACHAM (CHIP GENESIS INC / STANFORD VLSI GROUP)
//    !! THIS VERSION OF GENESIS2 IS NOT FOR ANY COMMERCIAL USE !!
//     FOR COMMERCIAL LICENSE CONTACT SHACHAM@ALUMNI.STANFORD.EDU
//--------------------------------------------------------------------------------
//
//  
//	-----------------------------------------------
//	|            Genesis Release Info             |
//	|  $Change: 11904 $ --- $Date: 2013/08/03 $   |
//	-----------------------------------------------
//	
//
//  Source file: /Users/dillon/VerilogWorkspace/CGRAGenerator/hardware/generator_z/pe_new/pe/rtl/test_opt_reg_file.svp
//  Source template: test_opt_reg_file
//
// --------------- Begin Pre-Generation Parameters Status Report ---------------
//
//	From 'generate' statement (priority=5):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Command Line input (priority=4):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From XML input (priority=3):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Config File input (priority=2):
//
// ---------------- End Pre-Generation Pramameters Status Report ----------------

// reg_cnt (_GENESIS2_DECLARATION_PRIORITY_) = 4
//


module  test_opt_reg_file  #(
  parameter DataWidth = 16
) (
  input                  clk,
  input                  clk_en,
  input                  rst_n,

  input                  load,
  input  [DataWidth-1:0] val,

  input  [DataWidth-1:0] cfg_d,
  input  [7:0]           cfg_a,
  input                  cfg_en,

  input  [2:0]           mode,

  input        [DataWidth-1:0] data_in,
  output logic [DataWidth-1:0] res,
  output logic [DataWidth-1:0] reg_data
);

logic [DataWidth-1:0] data_in_reg [3:0];
logic [DataWidth-1:0] data_in_reg_next;
logic                 data_in_le;

localparam REG_CONST  = 3'h0; // FF is loaded only when 'load'=1 with 'val'
localparam REG_VALID  = 3'h1; // Pipeline delay with clock_en = 'clk_en'
localparam REG_BYPASS = 3'h2; // FF is bypassed
localparam REG_DELAY  = 3'h3; // Assumes data is always valid
localparam REG_FILE   = 3'h4;


always_comb begin
  if (cfg_en && (cfg_a == 8'hF1)) begin
    data_in_reg_next = cfg_d;
  end else if (load) begin
    data_in_reg_next = val;
  end else begin
    data_in_reg_next = data_in;
  end
end

assign data_in_le = load                           |
                    (cfg_en & (cfg_a == 8'hF1))     |
                    (mode == REG_DELAY)            |
                    ((mode == REG_VALID) & clk_en);

always_ff @(posedge clk or negedge rst_n) begin
  if(~rst_n) begin
    data_in_reg[0] <= 'h0;
  end else if(data_in_le) begin
    data_in_reg[0] <= data_in_reg_next;
  end
end


genvar g_i;

generate
  for (g_i = 1; g_i < 4; g_i = g_i + 1) begin : GEN_REG_FILE
    always_ff @(posedge clk or negedge rst_n) begin
      if(~rst_n) begin
        data_in_reg[g_i] <= 'h0;
      end else if(cfg_en && (cfg_a[7:4] == 4'hD) && (g_i[3:0] == cfg_a[3:0] + 1)) begin
        data_in_reg[g_i] <= cfg_d;
      end
    end
  end
endgenerate


always_comb begin
  case (mode)
    REG_BYPASS: res = data_in;
    REG_CONST : res = data_in_reg[0];
    REG_FILE  : begin
      res = (data_in[2:0] < 4) ?
            data_in_reg[data_in[2:0]] :
            data_in_reg[0];
    end
    default   : res = data_in_reg[0];
  endcase // mode

end

always_comb begin
    case (cfg_a)
        8'hF1 : reg_data = data_in_reg[0];
        8'hD0 : reg_data = data_in_reg[1];
        8'hD1 : reg_data = data_in_reg[2];
        8'hD2 : reg_data = data_in_reg[3];
        default : reg_data = data_in_reg[0];
    endcase
end

endmodule
